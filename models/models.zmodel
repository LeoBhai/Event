

model NewsSource {

    id                String        @id @default(uuid())  
    name            String          
    websiteUrl  String?          
    logoUrl      String?          

articles    Article[]  @relation("newsSource")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Category {

    id                String        @id @default(uuid())  
    name            String          
    description  String?          

articles    Article[]  @relation("category")  
    userPreferences  UserPreference[]  @relation("category")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Article {

    id                String        @id @default(uuid())  
    title          String          
    content      String          
    publishDate  String          

authorId    String          
    author        User?            @relation(fields: [authorId], references: [id], name:"author")  
    newsSourceId  String          
    newsSource  NewsSource?  @relation(fields: [newsSourceId], references: [id], name:"newsSource")  
    categoryId  String          
    category    Category?    @relation(fields: [categoryId], references: [id], name:"category")  
 
    bookmarks  Bookmark[]  @relation("article")  
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model UserPreference {

    id                String        @id @default(uuid())  
    notificationEnabled  Boolean        

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    categoryId  String          
    category    Category?    @relation(fields: [categoryId], references: [id], name:"category")  
 
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Bookmark {

    id                String        @id @default(uuid())  
    createdAt  String          

userId        String          
    user            User?            @relation(fields: [userId], references: [id], name:"user")  
    articleId  String          
    article      Article?      @relation(fields: [articleId], references: [id], name:"article")  
 
      dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Newsletter {

    id                String        @id @default(uuid())  
    name            String          
    description  String?          
    frequency  String          

dateCreated DateTime @default(now())
      dateUpdated DateTime @updatedAt  @default(now())
      @@allow("all", true)
}

model Organization {
    id               String             @id @default(uuid())
    name             String
    pictureUrl       String?            @default('https://i.imgur.com/BgkFiid.jpeg')
    
    dateCreated      DateTime           @default(now())
    dateUpdated      DateTime           @updatedAt @default(now())
    roles            OrganizationRole[]

@@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}
model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    dateCreated    DateTime     @default(now())
    dateUpdated    DateTime     @updatedAt @default(now())

    userId         String
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?
    emailVerified     Boolean?
    
    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    dateCreated       DateTime           @default(now())
    dateUpdated       DateTime           @updatedAt @default(now())
    accounts          Account[]
    sessions          Session[]
    
    organizationRoles OrganizationRole[]

pushNotifications PushNotification[] @relation("user")

articlesAsAuthor  Article[]  @relation("author")  
        userPreferences  UserPreference[]  @relation("user")  
        bookmarks  Bookmark[]  @relation("user")  

@@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model PushNotification {
    id           String   @id @default(uuid())
    endpoint     String
    subscription String
    dateCreated  DateTime @default(now())
    dateUpdated  DateTime @updatedAt @default(now())

    userId       String
    user         User     @relation(fields: [userId], references: [id], name: 'user')

@@allow("all", true)
}

model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])

    @@allow("all", auth().id == user.id)
}

model RagVector {
    id        String   @id @default(uuid())
    key       String
    url       String
    tags      String[] @default([])
    vectors   Bytes?   @omit
    documents Bytes?   @omit

@@allow("all", true)
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@allow("all", auth().id == user.id)
}
